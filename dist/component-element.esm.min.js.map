{"version":3,"sources":["webpack://__LIB/webpack/bootstrap","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/getGlobal.js","webpack://__LIB/external \"(WeakMap.WeakMap = WeakMap)\"","webpack://__LIB/external \"(Symbol.Symbol = Symbol)\"","webpack://__LIB/(webpack)/buildin/global.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/runtime-aliases.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/objectExtend.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/nextTick.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/throwIfThisIsPrototype.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domAddEventListener.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domFind.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/dataStore.js","webpack://__LIB/./src/Ev.js","webpack://__LIB/./src/utils.js","webpack://__LIB/./src/polyfill-support.js","webpack://__LIB/./src/ComponentElement.js","webpack://__LIB/./src/decorators/prop.js","webpack://__LIB/./src/decorators/bind.js","webpack://__LIB/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","__webpack_exports__","GLOBAL","window","self","Function","WeakMap","g","this","eval","e","functionBindCall","functionBind","toString","isObject","obj","objectDefineProperty","objectKeys","defineProperties","keys","prop","setter","configurable","writable","descriptor","set","arr","isArray","Array","consoleLog","forEach","indexOf","splice","slice","console","log","consoleWarn","error","warn","HTMLElementPrototype","iterator","HTMLElement","doc","document","head","createElement","tagName","appendChild","insertBefore","hasAttribute","getAttribute","setAttribute","removeAttribute","objectExtend","mergeIntoObj","mergeObjects","response","total","length","deepMerge","shift","reIsNativeCode","nextTick","setImediate","test","Promise","resolved","resolve","fn","then","catch","immediates","processing","push","processPending","setTimeout","isQueued","queuedCallbacks","Set","flushQueue","callbacks","clear","queue","callback","add","throwIfThisIsPrototype","THIS","constructor","Error","domAddEventListener","ele","event","capture","events","split","evListeners","evName","addEventListener","remove","removeEventListener","listeners","domFind","domEle","selector","querySelectorAll","dataStore","stash","STATE","Ev","on","getStoreFor","delete","emit","data","inst","Map","has","PRIVATE","STATE_SYMBOL","elementHasAttributeForProp","propDef","aliases","some","propAlias","getState","instance","state","isCssScopingDone","templateEle","ev","destroyCallbacks","destroyQueued","isMounted","getPropsDefinition","ComponentClass","getComponentClassState","propsDef","statePropsDef","componentPropsDef","propName","propAliasDef","_isAlias","propNameAlias","observedAttrs","supportsShadyCSS","ShadyCSS","removeElement","parentNode","removeChild","isString","supportsNativeShadowDom","createShadowRoot","attachShadow","nativeShadow","prepareRenderedContent","renderOutput","eleInstance","isRenderOutputString","ComponentClassState","view","innerHTML","cloneNode","template","prepareTemplate","scopeCss","importNode","content","textContent","prepareTemplateDom","SHADOW_DOM_SUPPORTED","EV_DEFAULT_INIT","bubbles","cancelable","composed","CE_REGISTRY","customElements","PROPS_NOOP","freeze","EVENT_ANY","lazySetupUnderway","ComponentElement","args","super","component","useShadow","shadowMode","shadowRoot","_$ui","onPropsChange","_queueUpdate","didInit","setupComponent","[object Object]","define","delayDestroy","process","eventInitOptions","observedAttributes","propList","filter","attr","props","propDefinitions","notifyAnyListeners","notifyPropListeners","propValue","default","boolean","attrVal","geAttributeValueForProp","undefined","newValue","hasRequiredProps","required","every","$ui","destroy","clearTimeout","cb","didDestroy","onDestroy","$","querySelector","$$","update","_update","shouldRender","willRender","_setView","render","didRender","__queueUpdate","init","didMount","ready","mounted","didUnmount","unmounted","eventName","eventInit","eventNameLowercase","toLowerCase","CustomEvent","detail","dispatchEvent","eventNames","attributeChangedCallback","oldValue","connectedCallback","componentInstance","styleElement","styleComponentInstanceElement","disconnectedCallback","RE_UPPER_CASE_LETTERS","NOOP","val","options","kind","_propDecorator","initializer","propDefinition","validator","propertyDefinition","str","replace","match","p1","getKebabCase","getPropSetup","newDescriptor","getDecoratorDescriptor","extras","map","aliasName","proxyToPropName","componentPropDefinition","DecoratorDescriptor","placement","finisher","Klass","_bound","decoratorDescriptor","isDoingLazySetup","method","boundMethod","ComponentElement_ComponentElement"],"mappings":"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","file":"component-element.esm.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","\r\nexport const GLOBAL = (() => {\r\n    const undef = 'undefined';\r\n    /* global self, window, global */\r\n    if (typeof window !== undef) { return window; }\r\n    if (typeof global !== undef) { return global; }\r\n    if (typeof self !== undef) { return self; }\r\n    return Function('return this;')();\r\n})();\r\n\r\nexport function getGlobal() {\r\n    return GLOBAL;\r\n}\r\nexport default getGlobal;","module.exports = (WeakMap.WeakMap = WeakMap);","module.exports = (Symbol.Symbol = Symbol);","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * return a value to a given method\r\n *\r\n * @function\r\n * @param {Function} fn\r\n * @param {*} ctx The context to be assigned to `fn`\r\n * @return {Function}\r\n *\r\n * @example\r\n *\r\n * f = functionBin(function() { console.log(`Hello ${this.name}`); }, { name: \"Jackson\" });\r\n * f(); // => \"Hello Jackson\"\r\n */\r\nexport const functionBind = Function.bind.call.bind(Function.bind);\r\n\r\n/**\r\n * return a bound `.call` to the given method.\r\n *\r\n * @type function\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @example\r\n *\r\n * forEach = functionBindCall(Array.prototype.forEach);\r\n * // same as doing: Array.prototype.forEach.call (but returns a new \"call\" method);\r\n */\r\nexport const functionBindCall = functionBind(Function.call.bind, Function.call);\r\n\r\n// Object ===============================================================================\r\nexport const toString                 = functionBindCall(Object.prototype.toString);\r\nexport const isObject                 = obj => toString(obj) === \"[object Object]\";\r\nexport const isString                 = obj => toString(obj) === \"[object String]\";\r\nexport const isFunction               = obj => toString(obj) === \"[object Function]\";\r\nexport const objectDefineProperty     = Object.defineProperty;\r\nexport const objectDefineProperties   = Object.defineProperties;\r\nexport const objectKeys               = Object.keys;\r\nexport const defineProperty = (obj, prop, value, getter, setter, configurable = true, enumerable = false, writable = true) => {\r\n    const descriptor = {\r\n        configurable,\r\n        enumerable\r\n    };\r\n\r\n    if (getter || setter) {\r\n        descriptor.get = getter;\r\n        descriptor.set = setter;\r\n    } else {\r\n        descriptor.writable = writable;\r\n        descriptor.value = value;\r\n    }\r\n\r\n    objectDefineProperty(obj, prop, descriptor);\r\n\r\n    return obj;\r\n};\r\n\r\n\r\n// Array ===============================================================================\r\nconst arr = [];\r\nexport const isArray        = Array.isArray;\r\nexport const arrayForEach   = functionBindCall(arr.forEach);\r\nexport const arrayIndexOf   = functionBindCall(arr.indexOf);\r\nexport const arraySplice    = functionBindCall(arr.splice);\r\nexport const arraySlice    = functionBindCall(arr.slice);\r\n\r\n\r\n// Logging ===============================================================================\r\nexport const consoleLog = console.log; // eslint-disable-line\r\nexport const consoleError = console.error || consoleLog; // eslint-disable-line\r\nexport const consoleWarn = console.warn || consoleLog; // eslint-disable-line\r\n\r\n\r\n// Iterators ===============================================================================\r\nexport const SymbolIterator = \"undefined\" !== typeof Symbol && Symbol.iterator ? Symbol.iterator : \"@@iterator\";\r\n\r\n\r\n// DOM ===============================================================================\r\nconst HTMLElementPrototype = HTMLElement.prototype;\r\nexport const doc = document;\r\nexport const head = doc.head;\r\nexport const createDocFragment = () => doc.createDocumentFragment();\r\nexport const createElement = tagName => doc.createElement(tagName);\r\nexport const createTextNode = data => doc.createTextNode(data || \"\");\r\nexport const appendChild = functionBindCall(HTMLElementPrototype.appendChild);\r\nexport const insertBefore = functionBindCall(HTMLElementPrototype.insertBefore);\r\nexport const hasAttribute = functionBindCall(HTMLElementPrototype.hasAttribute);\r\nexport const getAttribute = functionBindCall(HTMLElementPrototype.getAttribute);\r\nexport const setAttribute = functionBindCall(HTMLElementPrototype.setAttribute);\r\nexport const removeAttribute = functionBindCall(HTMLElementPrototype.removeAttribute);","import {isObject} from \"./runtime-aliases.js\";\r\n\r\n//============================================================\r\n\r\n/**\r\n * Extends an object with the properties of another.\r\n *\r\n * @param {Object|Boolean} mergeIntoObj\r\n *  The object that will have the properties of every other object provided\r\n *  on input merged into. This can also be a `Boolean`, in which case,\r\n *  a deep merge of objects will be done - argument number 2 will\r\n *  become the `mergeIntoObj`.\r\n * @param {...Object} mergeObjects\r\n *\r\n * @return {Object}\r\n */\r\nexport function objectExtend(mergeIntoObj, ...mergeObjects) {\r\n    let response    = mergeIntoObj || {};\r\n    let total       = mergeObjects.length;\r\n    let deepMerge   = false;\r\n    let i;\r\n    let key;\r\n\r\n    if (typeof mergeIntoObj === \"boolean\") {\r\n        deepMerge   = mergeIntoObj;\r\n        response    = mergeObjects.shift() || {};\r\n        total       = mergeObjects.length;\r\n    }\r\n\r\n    for (i = 0; i < total; i++) {\r\n        if (!mergeObjects[i]) {\r\n            continue;\r\n        }\r\n\r\n        for (key in mergeObjects[i]) {\r\n            if (mergeObjects[i].hasOwnProperty(key)) {\r\n                if (\r\n                    deepMerge &&\r\n                    isObject(response[key]) &&\r\n                    isObject(mergeObjects[i][key])\r\n                ) {\r\n                    response[key] = objectExtend( true, response[key], mergeObjects[i][key]);\r\n\r\n                } else {\r\n                    response[key] = mergeObjects[i][key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return response;\r\n}\r\nexport default objectExtend;","/* global setImediate:true */\r\nlet reIsNativeCode = /native code/i;\r\n\r\n/**\r\n * Executes a function at the end of the current event Loop - during micro-task processing\r\n *\r\n * @param {Function} callback\r\n */\r\nlet nextTick = (function(){\r\n    if (typeof setImediate !== \"undefined\" && reIsNativeCode.test(setImediate.toString())) {\r\n        return setImediate;\r\n    }\r\n\r\n    // Native Promsie? Use it.\r\n    if (typeof Promise === 'function' && reIsNativeCode.test(Promise.toString())) {\r\n        let resolved = Promise.resolve();\r\n        return function _nextTickPromise(fn) {\r\n            resolved.then(fn).catch(e => console.error(e)); // eslint-disable-line\r\n        };\r\n    }\r\n\r\n    // fallback to setTimeout\r\n    // From: https://bugzilla.mozilla.org/show_bug.cgi?id=686201#c68\r\n    let immediates = [];\r\n    let processing = false;\r\n\r\n    function processPending() {\r\n        setTimeout(function() {\r\n            immediates.shift()();\r\n            if (immediates.length) {\r\n                processPending();\r\n            } else {\r\n                processing = false;\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    return function _nextTickSetTimeout(fn) {\r\n        immediates.push(fn);\r\n        if (!processing) {\r\n            processing = true;\r\n            processPending();\r\n        }\r\n    };\r\n})();\r\n\r\nlet isQueued = false;\r\nconst queuedCallbacks = new Set();\r\nlet i, t;\r\nconst flushQueue = () => {\r\n    const callbacks = [ ...queuedCallbacks ];\r\n    queuedCallbacks.clear();\r\n    isQueued = false;\r\n    for (i = 0, t = callbacks.length; i < t; i++) {\r\n        callbacks[i]();\r\n    }\r\n};\r\n\r\n/**\r\n * Queues a callback to be executed on nextTick. Unlike calling `nextTick` directly\r\n * `queue()` will ensure that the same callback is not executed more than once when\r\n * `nextTick` runs.\r\n *\r\n * @param {Function} callback\r\n */\r\nnextTick.queue = callback => {\r\n    queuedCallbacks.add(callback);\r\n    if (!isQueued) {\r\n        isQueued = true;\r\n        nextTick(flushQueue);\r\n    }\r\n};\r\n\r\nexport default nextTick;\r\nexport { nextTick };\r\n","/**\r\n * Check if the given `this` value matches its own Constructor's prototype, and\r\n * if so, throw an error.\r\n * Good to use with lazy properties that set themselves up on first access\r\n *\r\n * @param {Object} THIS\r\n * @throws\r\n */\r\nexport function throwIfThisIsPrototype(THIS) {\r\n    if (THIS.constructor && THIS === THIS.constructor.prototype) {\r\n        throw new Error(\"Can not be accessed directly on constructor.prototype!\");\r\n    }\r\n}","/**\r\n * Adds an event handler to a DOM element and returns back an\r\n * object that allows for removal of the event.\r\n *\r\n * @function domAddEventListener\r\n *\r\n * @param {HTMLElement} ele\r\n * @param {String} event\r\n *  The event to listen to (ex. `click`). Multiple events can be defined\r\n *  by separating them with whitespace\r\n * @param {Function} callback\r\n * @param {Boolean} [capture]\r\n *\r\n * @return DOMEventListener\r\n *\r\n * @example\r\n *\r\n * var listener = domAddEventHandler(myEle, \"click\", function(){});\r\n * ...\r\n * listener.remove();\r\n */\r\nexport function domAddEventListener(ele, event, callback, capture) {\r\n    let events      = event.split(/\\s+/);\r\n    let evListeners = {};\r\n\r\n    events.forEach(evName => {\r\n        ele.addEventListener(evName, callback, capture);\r\n        evListeners[evName] = {\r\n            remove: () => ele.removeEventListener(evName, callback, capture)\r\n        }\r\n    });\r\n\r\n    /**\r\n     * A DOM Event listener.\r\n     *\r\n     * @typedef {Object} DOMEventListener\r\n     *\r\n     * @property {Function} remove\r\n     * @property {Object} listeners\r\n     *  List of listeners that were bound to the DOM element. Each listeners has a\r\n     *  corresponding `.remove()` method.\r\n     */\r\n    return Object.create({\r\n        listeners: evListeners,\r\n        remove: function () {\r\n            events.forEach(evName => evListeners[evName].remove());\r\n        }\r\n    });\r\n}\r\nexport default domAddEventListener;\r\n","/**\r\n * Finds Elements within a given HTML Element using `querySelectorAll` and\r\n * return an Array with those elements.\r\n *\r\n * @function domFind\r\n *\r\n * @param {HTMLElement} domEle\r\n * @param {String} selector\r\n *\r\n * @returns {Array<HTMLElement>}\r\n */\r\nexport function domFind(domEle, selector){\r\n    return Array.prototype.slice.call(domEle.querySelectorAll(selector));\r\n}\r\nexport default domFind;\r\n","import {WeakMap} from \"./WeakMap\";\r\n\r\n/**\r\n * Returns an object that contains an initialized WeakMap (`stash` property)\r\n * where data can be stored.\r\n *\r\n * @namespace dataStore\r\n *\r\n */\r\nvar dataStore = /** @lends dataStore */{\r\n    /**\r\n     * Stash data here.\r\n     * @type WeakMap\r\n     */\r\n    stash:  new WeakMap(),\r\n    /**\r\n     * Create a private data store and return it.\r\n     * @return {WeakMap}\r\n     */\r\n    create: function(){\r\n        return new WeakMap();\r\n    }\r\n};\r\n\r\nexport default dataStore;\r\nexport { dataStore };\r\n","const STATE = Symbol(\"state\");\r\n\r\n/**\r\n * Supper tiny Eventemmiter\r\n */\r\nexport class Ev {\r\n    on(evName, callback) {\r\n        getStoreFor(this, evName).add(callback);\r\n        return () => getStoreFor(this, evName).delete(callback);\r\n    }\r\n    emit(evName, data) {\r\n        getStoreFor(this, evName).forEach(callback => callback(data));\r\n    }\r\n    clear() {\r\n        getStoreFor(this).clear();\r\n    }\r\n}\r\n\r\n/**\r\n * @return {Set}\r\n */\r\nfunction getStoreFor(inst, evName) {\r\n    if (!inst[STATE]) {\r\n        inst[STATE] = new Map();\r\n    }\r\n    if (!evName) {\r\n        return inst[STATE];\r\n    }\r\n    if (!inst[STATE].has(evName)) {\r\n        inst[STATE].set(evName, new Set());\r\n    }\r\n    return inst[STATE].get(evName);\r\n}","import objectExtend from \"@purtuga/common/src/jsutils/objectExtend\"\r\nimport dataStore from \"@purtuga/common/src/jsutils/dataStore\"\r\nimport { isArray, objectKeys } from \"@purtuga/common/src/jsutils/runtime-aliases\"\r\nimport {Symbol} from \"@purtuga/common/src/jsutils/Symbol\"\r\nimport {Ev} from \"./Ev.js\";\r\n//============================================================================\r\nexport const PRIVATE = dataStore.create();\r\nexport const STATE_SYMBOL = Symbol(\"state\");\r\n\r\n/**\r\n * Checks if the element has an attribute set that matches any of the aliases for a prop\r\n *\r\n * @param {ComponentElement} ele\r\n * @param {ComponentElement~PropDefinition} propDef\r\n *\r\n * @return {Boolean}\r\n */\r\nexport function elementHasAttributeForProp(ele, propDef) {\r\n    return propDef.aliases.some(propAlias => ele.hasAttribute(propAlias));\r\n}\r\n\r\n/**\r\n * Get the prop value from the possible HTML attributes (propName + aliases)\r\n *\r\n * @param ele\r\n * @param propDef\r\n * @returns {string}\r\n */\r\nexport function geAttributeValueForProp(ele, propDef) {\r\n    let attrVal = \"\";\r\n    propDef.aliases.some(propAlias => {\r\n        if (ele.hasAttribute(propAlias)) {\r\n            attrVal = ele.getAttribute(propAlias);\r\n            return true;\r\n        }\r\n    });\r\n    return attrVal;\r\n}\r\n\r\nexport function getState(instance) {\r\n    if (!PRIVATE.has(instance)) {\r\n        let state = {\r\n            isCssScopingDone: false,\r\n            templateEle: null,\r\n            ev: new Ev(),\r\n            destroyCallbacks: [],\r\n            destroyQueued: null,\r\n            isMounted: false\r\n        };\r\n\r\n        PRIVATE.set(instance, state);\r\n    }\r\n    return PRIVATE.get(instance);\r\n}\r\n\r\n\r\n/**\r\n * Returns a kebab-case representation of the given string on input. Essentially, replaces\r\n * each Capital letter with a `-` followed by that letter in lower case.\r\n *\r\n * @param {String} str\r\n *\r\n * @return {String}\r\n *\r\n * @example\r\n *\r\n * getKebabCase(\"Paul\"); // => -paul\r\n * getKebabCase(\"paulTavares\"); // => paul-tavares\r\n */\r\nexport function getKebabCase(str) {\r\n    return str.replace(/([A-Z])/g, (match, p1) => \"-\" + p1.toLowerCase())\r\n}\r\n\r\n\r\n/**\r\n * Given a string in kebab case (ex. paul-tavares), this will return a CamelCase\r\n * representation of that string.\r\n *\r\n * @param {String} str\r\n *\r\n * @return {String}\r\n */\r\nexport function getCamelCase(str) {\r\n    return str.replace(/(-[a-z])/g, (match, p1) => p1.toUpperCase().substr(1))\r\n}\r\n\r\n/**\r\n *\r\n * @param ComponentClass\r\n * @returns {Object<String,ComponentElement~PropDefinition>}\r\n */\r\nexport function getPropsDefinition(ComponentClass) {\r\n    let state = getComponentClassState(ComponentClass);\r\n\r\n    if (!state.propsDef) {\r\n        const statePropsDef = state.propsDef = {};\r\n        const componentPropsDef = ComponentClass.propsDef;\r\n\r\n        // The props are stored internally (weakmap) once for the Component Class.\r\n        // The internal definition has the \"aliases\" expanded as well.\r\n        if (componentPropsDef) {\r\n            objectKeys(componentPropsDef).forEach(propName => {\r\n                statePropsDef[propName] = componentPropsDef[propName];\r\n                // expand aliases as well\r\n                if (isArray(statePropsDef[propName].aliases)) {\r\n                    const propAliasDef = objectExtend({}, componentPropsDef[propName], { _isAlias: true });\r\n                    statePropsDef[propName].aliases.forEach(\r\n                        propNameAlias => !statePropsDef[propNameAlias] &&\r\n                                        (statePropsDef[propNameAlias] = propAliasDef));\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return state.propsDef;\r\n}\r\n\r\n/**\r\n * Returns the internal state for the Component Class\r\n *\r\n * @param {ComponentElement} ComponentClass\r\n *\r\n * @return {Object}\r\n */\r\nexport function getComponentClassState(ComponentClass) {\r\n    if (!PRIVATE.has(ComponentClass)) {\r\n        PRIVATE.set(ComponentClass, {\r\n            propsDef: null,\r\n            templateEle: null,\r\n            observedAttrs: null\r\n        });\r\n    }\r\n    return PRIVATE.get(ComponentClass);\r\n}\r\n\r\n\r\n","//--------------------------------------------------------------\r\n// Utilities to work with polyfills like ShadyCSS\r\n//--------------------------------------------------------------\r\nimport {GLOBAL} from \"@purtuga/common/src/jsutils/getGlobal\"\r\nimport {domFind} from \"@purtuga/common/src/domutils/domFind.js\"\r\nimport {createElement, head} from \"@purtuga/common/src/jsutils/runtime-aliases.js\"\r\nimport {getComponentClassState} from \"./utils.js\"\r\n\r\n//===========================================================================================\r\nexport const supportsShadyCSS = () => !!GLOBAL.ShadyCSS;\r\nconst removeElement = ele => ele.parentNode.removeChild(ele);\r\nconst isString = s => \"string\" === typeof s;\r\n\r\n/**\r\n * if runtime env. supports shadowRoot\r\n * @returns {boolean}\r\n */\r\nexport function supportsNativeShadowDom() {\r\n    return (head.createShadowRoot || head.attachShadow) &&\r\n        (!supportsShadyCSS() || GLOBAL.ShadyCSS.nativeShadow)\r\n}\r\n\r\n/**\r\n * Scopes the CSS of a given template for the Component by using ShadyCSS.\r\n *\r\n * @param template\r\n * @param eleInstance\r\n */\r\nexport function scopeCss (template, eleInstance) {\r\n    if (supportsShadyCSS()) {\r\n        GLOBAL.ShadyCSS.prepareTemplate(template, eleInstance.constructor.tagName);\r\n    }\r\n}\r\n\r\n/**\r\n * Prepares the rendered content by removing style elements - since they were sopped\r\n * during `scopeCss`\r\n *\r\n * @param renderedContent\r\n * @param componentInstance\r\n *\r\n * @return {HTMLElement|DocumentFragment}\r\n */\r\nexport function prepareRenderedContent(renderOutput, eleInstance) {\r\n    if (supportsShadyCSS()) {\r\n        const isRenderOutputString = isString(renderOutput);\r\n        const ComponentClassState = getComponentClassState(eleInstance.constructor);\r\n        let {templateEle} = ComponentClassState;\r\n        let view;\r\n\r\n        // If Styles have not yet been scoped in the HEAD of the element for this CE Class,\r\n        // then do it now this occurs only once per Component.\r\n        if (!templateEle) {\r\n            ComponentClassState.templateEle = templateEle = createElement(\"template\");\r\n            if (isRenderOutputString) {\r\n                templateEle.innerHTML = renderOutput;\r\n            } else {\r\n                templateEle.appendChild(renderOutput.cloneNode(true));\r\n            }\r\n            scopeCss(templateEle , eleInstance);\r\n        }\r\n\r\n        // If the input was a string, then get a document fragment out of it\r\n        if (isRenderOutputString) {\r\n            templateEle.innerHTML = renderOutput;\r\n            view = document.importNode(templateEle.content, true);\r\n            templateEle.textContent = \"\";\r\n        } else {\r\n            view = renderOutput;\r\n        }\r\n\r\n        // Need to prepare this DOM by calling ShadyCSS.prepareTemplateDom so\r\n        // that scoping classes are applied\r\n        if (!view.content) { // FIXME: should use isTemplate()\r\n            view.content = view;\r\n        }\r\n\r\n        // FIXME: this is dangerous because it expects a certain internal implementation in prepareTemplateDom()\r\n        GLOBAL.ShadyCSS.prepareTemplateDom(view, eleInstance.constructor.tagName);\r\n\r\n        // TODO: any momoization can happen here?\r\n\r\n        // Remove <style> element\r\n        domFind(view, \"style\").forEach(removeElement);\r\n        return view;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Styles the instance of a custom element using ShadyCSS\r\n *\r\n * @param {HTMLElement} componentInstance\r\n */\r\nexport function styleComponentInstanceElement(componentInstance) {\r\n    if (supportsShadyCSS()) {\r\n        GLOBAL.ShadyCSS.styleElement(componentInstance);\r\n    }\r\n}\r\n\r\n/**\r\n * Restyles a component's sub-tree. Use it when DOM might have been altered dynamically\r\n * and polyfilled styles needs to be applied.\r\n *\r\n * @param {HTMLElement} componentInstance\r\n */\r\nexport function reStyleComponentInstanceSubtree(componentInstance) {\r\n    if (supportsShadyCSS()) {\r\n        GLOBAL.ShadyCSS.styleSubtree(componentInstance)\r\n    }\r\n}","import objectExtend from \"@purtuga/common/src/jsutils/objectExtend\"\r\nimport {nextTick} from \"@purtuga/common/src/jsutils/nextTick.js\"\r\nimport {throwIfThisIsPrototype} from \"@purtuga/common/src/jsutils/throwIfThisIsPrototype.js\"\r\nimport {\r\n    objectKeys,\r\n    defineProperty,\r\n    consoleWarn,\r\n    head\r\n} from \"@purtuga/common/src/jsutils/runtime-aliases\"\r\nimport domAddEventListener from \"@purtuga/common/src/domutils/domAddEventListener\"\r\nimport domFind from \"@purtuga/common/src/domutils/domFind\"\r\nimport {\r\n    getState,\r\n    PRIVATE,\r\n    getPropsDefinition,\r\n    getComponentClassState,\r\n    elementHasAttributeForProp,\r\n    geAttributeValueForProp\r\n} from \"./utils\"\r\nimport {\r\n    styleComponentInstanceElement,\r\n    prepareRenderedContent,\r\n    supportsNativeShadowDom\r\n} from \"./polyfill-support\"\r\n\r\n//============================================================================\r\nconst SHADOW_DOM_SUPPORTED = head.createShadowRoot || head.attachShadow;\r\nconst EV_DEFAULT_INIT = { bubbles: true, cancelable: true, composed: true };\r\nconst CE_REGISTRY = window.customElements;\r\nconst PROPS_NOOP = Object.freeze(Object.create(null));\r\nconst EVENT_ANY = Symbol(\"ev.props.any\");\r\nlet lazySetupUnderway = false;\r\n\r\n/**\r\n * A generic class for building widgets based on HTML Custom Elements.\r\n *\r\n * @extends HTMLElement\r\n *\r\n */\r\nexport class ComponentElement extends HTMLElement {\r\n    constructor(...args) {\r\n        const self = super(...args) || this;\r\n        setupComponent(self);\r\n        return self;\r\n    }\r\n\r\n    //==============================================================\r\n    //  Static Members\r\n    //==============================================================\r\n\r\n    /**\r\n     * The Component's props definition\r\n     * @name propsDef\r\n     * @type {Object<String,ComponentElement~PropDefinition>}\r\n     */\r\n    static propsDef = PROPS_NOOP;\r\n\r\n    /**\r\n     * Return default registration tag name\r\n     *\r\n     * @type {String}\r\n     */\r\n    static get tagName() { throw new Error(\"tagName not defined\") }\r\n\r\n    /**\r\n     * Registers the web component. Uses tagName as default input param\r\n     */\r\n    static define(name) {\r\n        name = name || this.tagName;\r\n\r\n        if (CE_REGISTRY.get(name)) {\r\n            if (CE_REGISTRY.get(name) !== this) {\r\n                consoleWarn(`${name} is already a defined in customElementsRegistry as a different Class`);\r\n            }\r\n            return;\r\n        }\r\n\r\n        CE_REGISTRY.define(name, this);\r\n    }\r\n\r\n    /**\r\n     * The number of milliseconds to wait after an element has been detached from DOM before\r\n     * the `.destroy()` method is auto executed.\r\n     *\r\n     * @type {Number}\r\n     */\r\n    static get delayDestroy() { return 0; }\r\n\r\n    /**\r\n     * If Shadow DOM should be used. Default `true`\r\n     *\r\n     * @type {Boolean}\r\n     */\r\n    static get useShadow() { return true; }\r\n\r\n    /**\r\n     * The value for the `mode` option that will be used on the `attachShadow` method.\r\n     *\r\n     * @type {string}\r\n     */\r\n    static get shadowMode() { return \"open\"; }\r\n\r\n    /**\r\n     * Returns the HTML template for the component. Could also be a Template html element\r\n     *\r\n     * @type {String|HTMLTemplateElement}\r\n     */\r\n    static get template() {\r\n        // fixme: remove post v2.\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            consoleWarn(`${this.name}.template is Deprecated! Use .render() method`);\r\n        }\r\n        return \"<div></div>\";\r\n    }\r\n\r\n    /**\r\n     * Renderer for the template and return what should be inserted into shadowDom.\r\n     * By default, this base class will simply clone the `template` defined in the\r\n     * static property above. This method will called prior to doing that, and if\r\n     * it returns a `truthy` value, then its assume to be either an HTMLElement or\r\n     * DocumentFragment with the element's instance UI (which will be inserted into\r\n     * shadowDom).\r\n     *\r\n     * **NOTE**: Should always use `getComponentInstanceTemplate` or `getComponentTemplate`\r\n     * to retrieve the template or its content, since it is manipulated in browsers that\r\n     * use the polyfills to make the template compatible in those platforms.\r\n     *\r\n     * @param {ComponentElement} eleInstance\r\n     *  The `ComponentElement` instance being initialized\r\n     *\r\n     * @return {HTMLElement|DocumentFragment}\r\n     */\r\n    static renderTemplate(/*eleInstance*/) {\r\n        // FIXME: remove post v2.\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            consoleWarn(`${this.name}.renderTemplate is NO LONGER SUPPORTED! Use .render() method`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The default initialization options for the `emit()` method.\r\n     * See [Event.contructor]{@link http://devdocs.io/dom/event/event} for more.\r\n     *\r\n     * @type EventInit\r\n     */\r\n    static get eventInitOptions() { return EV_DEFAULT_INIT; }\r\n\r\n    // Returns the list (Array) of props that were marked as `@attr`\r\n    static get observedAttributes() {\r\n        let state = getComponentClassState(this);\r\n\r\n        if (!state.observedAttrs) {\r\n            const propList = getPropsDefinition(this);\r\n            state.observedAttrs = objectKeys(propList).filter(p => propList[p].attr);\r\n        }\r\n\r\n        return state.observedAttrs;\r\n    }\r\n\r\n    //==============================================================\r\n    //  Instance Members\r\n    //==============================================================\r\n\r\n    /**\r\n     * The Component's props.\r\n     * @type {Object}\r\n     */\r\n    get props() {\r\n        throwIfThisIsPrototype(this);\r\n\r\n        if (lazySetupUnderway) {\r\n            return undefined;\r\n        }\r\n\r\n        lazySetupUnderway = true;\r\n\r\n        const propDefinitions = getPropsDefinition(this.constructor);\r\n        let props = {};\r\n        const ev = getState(this).ev;\r\n        const notifyAnyListeners = () => ev.emit(EVENT_ANY);\r\n\r\n        objectKeys(propDefinitions).forEach(propName => {\r\n            if (!propDefinitions[propName] || !propDefinitions[propName]._isAlias) {\r\n                const notifyPropListeners = () => ev.emit(propName);\r\n                let propValue = propDefinitions[propName].default.call(this);\r\n\r\n                if (\r\n                    propDefinitions[propName].attr &&\r\n                    !propDefinitions[propName].boolean &&\r\n                    elementHasAttributeForProp(this, propDefinitions[propName])\r\n                ) {\r\n                    propValue = geAttributeValueForProp(this, propDefinitions[propName]);\r\n                } else if (this.hasOwnProperty(propName)) {\r\n                    // if the current element has a prop by this same name set directly on the instance,\r\n                    // then this implies that it was set prior to the Element being upgraded.\r\n                    propValue = this[propName];\r\n                    delete this[propName]; // this sets functionality back to the getter/setter.\r\n                }\r\n\r\n                // FIXME: convert this call to defineProperty()\r\n                defineProperty(\r\n                    props,\r\n                    propName,\r\n                    undefined,\r\n                    function getProp () {\r\n                        return propValue;\r\n                    },\r\n                    newValue => {\r\n                        newValue = propDefinitions[propName].filter.call(this, newValue);\r\n                        nextTick.queue(notifyPropListeners);\r\n                        nextTick.queue(notifyAnyListeners);\r\n                        return propValue = newValue;\r\n                    },\r\n                    true,\r\n                    true\r\n                );\r\n            }\r\n        });\r\n\r\n        defineProperty(this, \"props\", props, undefined, undefined, true, true, false);\r\n        lazySetupUnderway = false;\r\n\r\n        return props;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating if Component has all required props fulfilled\r\n     */\r\n    get hasRequiredProps() {\r\n        throwIfThisIsPrototype(this);\r\n        return objectKeys(this.constructor.propsDef)\r\n            .filter(propName => this.constructor.propsDef[propName].required)\r\n            .every(propName => !!this.props[propName]);\r\n    }\r\n\r\n    /**\r\n     * returns a boolean indicating if component is connected to DOM\r\n     * @return {Boolean}\r\n     */\r\n    get isMounted() {\r\n        throwIfThisIsPrototype(this);\r\n        return getState(this).isMounted\r\n    }\r\n\r\n    /**\r\n     * Pointer to the UI of the Component. Value is will either be the `showdowRoot` or the element\r\n     * itself.\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    get $ui() {\r\n        return this._$ui;\r\n    }\r\n\r\n    /**\r\n     * Destroy the instance of the widget\r\n     */\r\n    destroy() {\r\n        if (PRIVATE.has(this)) {\r\n            const state = getState(this);\r\n            PRIVATE.delete(this);\r\n            if (state.destroyQueued) {\r\n                clearTimeout(state.destroyQueued);\r\n                state.destroyQueued = null;\r\n            }\r\n            state.destroyCallbacks.splice(0).forEach(cb => cb());\r\n        }\r\n        if (this.parentNode) {\r\n            this.parentNode.removeChild(this);\r\n        }\r\n        this.didDestroy();\r\n    }\r\n\r\n    /**\r\n     * Adds a callback to be executed when Component is destroyed.\r\n     * @param {Function} callback\r\n     */\r\n    onDestroy(callback) {\r\n        getState(this).destroyCallbacks.push(callback);\r\n    }\r\n\r\n\r\n    /**\r\n     * Find an element in the `$ui` (alias for `querySelector()`)\r\n     *\r\n     * @param {String} selector\r\n     *\r\n     * @return {HTMLElement}\r\n     */\r\n    $(selector) {\r\n        return this.$ui.querySelector(selector);\r\n    }\r\n\r\n    /**\r\n     * Returns an array with matched set of DOM elements based on the given selector.\r\n     * (alias for `querySelectorAll()`)\r\n     *\r\n     * @param {String} selector\r\n     *\r\n     * @returns {Array<HTMLElement>}\r\n     */\r\n    $$(selector) {\r\n        return domFind(this.$ui, selector);\r\n    }\r\n\r\n    /**\r\n     * Updates the component's DOM by running through the render lifecycle of:\r\n     *\r\n     *  `willRender()`\r\n     *  `render()`\r\n     *  `didRender()`\r\n     *\r\n     * This method probably should not be called directly. It is automatically\r\n     * called when props change\r\n     */\r\n    get update() {\r\n        throwIfThisIsPrototype(this);\r\n\r\n        if (lazySetupUnderway) {\r\n            return undefined;\r\n        }\r\n\r\n        const _update = () => {\r\n            if (!this.isMounted) {\r\n                return;\r\n            }\r\n\r\n            const shouldRender = this.willRender();\r\n\r\n            if (\"boolean\" !== typeof shouldRender || shouldRender) {\r\n                this._setView(this.render());\r\n                this.didRender();\r\n            }\r\n        };\r\n\r\n        lazySetupUnderway = true;\r\n        defineProperty(this, \"update\", _update);\r\n        lazySetupUnderway = false;\r\n\r\n        return _update;\r\n    }\r\n\r\n    /**\r\n     * An instance bound method used to queue the render update cycle\r\n     * @type Function\r\n     * @private\r\n     */\r\n    get _queueUpdate() {\r\n        throwIfThisIsPrototype(this);\r\n\r\n        if (lazySetupUnderway) {\r\n            return undefined;\r\n        }\r\n\r\n        const __queueUpdate = () => {\r\n            nextTick.queue(this.update);\r\n        };\r\n\r\n        lazySetupUnderway = true;\r\n        defineProperty(this, \"_queueUpdate\", __queueUpdate);\r\n        lazySetupUnderway = false;\r\n\r\n        return __queueUpdate;\r\n    }\r\n\r\n    /**\r\n     * Handles the render output - which normally means flush it ot DOM.\r\n     * Override for different render libraries\r\n     *\r\n     * @protected\r\n     * @param renderOutput\r\n     */\r\n    _setView(renderOutput) {\r\n        let view = renderOutput;\r\n\r\n        if (!supportsNativeShadowDom()) {\r\n            view = prepareRenderedContent(renderOutput, this) || renderOutput;\r\n        }\r\n\r\n        // If it looks like html, then use innerHTML\r\n        if (\"string\" === typeof view) {\r\n            this.$ui.innerHTML = view;\r\n        } else {\r\n            this.$ui.textContent = \"\";\r\n            this.$ui.appendChild(view);\r\n        }\r\n    }\r\n\r\n    //--------------------------------------------------------------\r\n    //~~~~~~~~~~~~~~~~~~~~~~ LIFE CYCLE HOOKS ~~~~~~~~~~~~~~~~~~~~~~\r\n    //--------------------------------------------------------------\r\n\r\n    /**\r\n     * Called to initialize the component. At this point `this.$ui` has been set\r\n     * (to either `shadowRoot` or `this`), but nothing has ben rendered.\r\n     */\r\n    didInit() {\r\n        // FIXME: delete after v2\r\n        if (\"init\" in this) {\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                consoleWarn(`${this.constructor.name}.init() is Deprecated! Use .didInit()`);\r\n            }\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component was mounted (attached to DOM)\r\n     */\r\n    didMount() {\r\n        // FIXME: delete after v2\r\n        if (\"ready\" in this) {\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                consoleWarn(`${this.constructor.name}.ready() is Deprecated! Use .didMount()`);\r\n            }\r\n            this.ready();\r\n        }\r\n        // FIXME: delete after v2\r\n        if (\"mounted\" in this) {\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                consoleWarn(`${this.constructor.name}.mounted() is Deprecated! Use .didMount()`);\r\n            }\r\n\r\n            // mounted() {}\r\n            this.mounted(); // FIXME: remove post v2\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component's render function is about to be called. if a `Boolean` `false` is\r\n     * returned, `render()` will be canceled.\r\n     * @return {Boolean}\r\n     */\r\n    willRender() {}\r\n\r\n    /**\r\n     * Render the Component's content.\r\n     *\r\n     * __IMPORTANT__: Note that by default, this view handler (`_setView`) does not support\r\n     * dynamic styles in polyfilled environments. Styles will be scooped only on first render.\r\n     *\r\n     * @return {String|HTMLElement|DocumentFragment}\r\n     */\r\n    render(){}\r\n\r\n    /**\r\n     * Component has been rendered and dates flushed to DOM\r\n     */\r\n    didRender() {}\r\n\r\n    /**\r\n     * Called if component has been initialized (`init()` has run).\r\n     */\r\n    didUnmount() {\r\n        // FIXME: delete after v2\r\n        if (\"unmounted\" in this) {\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                consoleWarn(`${this.constructor.name}.unmounted() is Deprecated! Use .didUnmount()`);\r\n            }\r\n            this.unmounted();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component was destroyed (destroy callback were already called)\r\n     */\r\n    didDestroy() {}\r\n\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~ EVENTEMITTER INTERFACE ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    /**\r\n     * Dispatches a native `CustomEvent`. The `data` provided will be available\r\n     * in the customEvent.detail property\r\n     *\r\n     * @param {String} eventName\r\n     * @param {*} data\r\n     * @param {EventInit} [eventInit=ComponentElement.eventInitOptions]\r\n     *  Any other options for the CustomEvent initialization.\r\n     *  See [Event.constructor]{@link http://devdocs.io/dom/event/event} for more.\r\n     *\r\n     * @example\r\n     *\r\n     * document.body.addEventListener(\"my-event\", function (ev) { console.log(ev.detail); });\r\n     *\r\n     * // My component\r\n     * myComponent.emit(\"my-event\", { msg: \"hello\" });\r\n     *\r\n     */\r\n    emit(eventName, data, eventInit) {\r\n        const eventNameLowercase = eventName.toLowerCase();\r\n        const event = new CustomEvent(\r\n            eventName,\r\n            objectExtend({}, this.constructor.eventInitOptions, eventInit, { detail: data })\r\n        );\r\n\r\n        if (\"function\" === typeof this[eventNameLowercase]) {\r\n            this[eventNameLowercase](event);\r\n        }\r\n\r\n        this.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Set an event listener on the current component\r\n     *\r\n     * @param {String} eventNames\r\n     *  One or more event names to listen for (space delimiter)\r\n     *\r\n     * @param {Function} callback\r\n     *\r\n     * @param {Boolean} [capture=false]\r\n     *\r\n     * @returns {DOMEventListener}\r\n     */\r\n    on(eventNames, callback, capture) {\r\n        return domAddEventListener(this, eventNames, callback, capture);\r\n    }\r\n\r\n    /**\r\n     * Add callback to be called when props change\r\n     *\r\n     * @param {Function} callback\r\n     * @param {String} [propName]\r\n     *  Optional. The specific prop to watch.\r\n     *\r\n     * @return {Function}\r\n     */\r\n    onPropsChange(callback, propName) {\r\n        return getState(this).ev.on(propName || EVENT_ANY, callback);\r\n    }\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~ NATIVE METHODS ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    // Reflects changed html attributes to state.props\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        const propsDef =  getPropsDefinition(this.constructor);\r\n        if (propsDef[name]) {\r\n            name = propsDef[name].name;\r\n        }\r\n        this.props[name] = newValue;\r\n    }\r\n\r\n    connectedCallback() {\r\n        const state = getState(this);\r\n\r\n        if (state.destroyQueued) {\r\n            clearTimeout(state.destroyQueued);\r\n            state.destroyQueued = null;\r\n        }\r\n\r\n        if (!supportsNativeShadowDom()) {\r\n            styleComponentInstanceElement(this);\r\n        }\r\n\r\n        state.isMounted = true;\r\n        this.didMount();\r\n        this._queueUpdate();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        // Delay calling .destroy() by 60s, just in case user re-attaches component back to dom.\r\n        // This seems to be currently the only way to ensure attached `onDestroy` logic run when\r\n        // the element is no longer needed.\r\n        if (PRIVATE.has(this)) {\r\n            const state = getState(this);\r\n            if (!state.destroyQueued) {\r\n                state.destroyQueued = setTimeout(this.destroy.bind(this), this.constructor.delayDestroy);\r\n            }\r\n            state.isMounted = false;\r\n        }\r\n\r\n        this.didUnmount();\r\n    }\r\n}\r\n\r\nexport default ComponentElement;\r\n\r\nfunction setupComponent (component) {\r\n    const { useShadow, shadowMode } = component.constructor;\r\n    if (useShadow && SHADOW_DOM_SUPPORTED) {\r\n        if (component.shadowRoot) {\r\n            component._$ui = component.shadowRoot;\r\n        }\r\n        else {\r\n            component._$ui = component.attachShadow({ mode: shadowMode });\r\n        }\r\n    }\r\n    else {\r\n        component._$ui = component;\r\n    }\r\n\r\n    component.onPropsChange(component._queueUpdate);\r\n    component.didInit();\r\n}\r\n\r\n// function __setupComponent(component) {\r\n//     const state = getState(component);\r\n//     let lastReadyState = null;\r\n//     const handleReadyChanges = () => {\r\n//         if (lastReadyState === state.ready) {\r\n//             return;\r\n//         }\r\n//\r\n//         lastReadyState = state.ready;\r\n//\r\n//         if (state.ready) {\r\n//             if (!state.hasTemplate) {\r\n//                 // component._$ui.innerHTML = component.constructor.template;\r\n//                 component._$ui.appendChild(\r\n//                     component.constructor.renderTemplate(component)\r\n//                 );\r\n//                 state.hasTemplate = true;\r\n//             }\r\n//\r\n//             component.didMount();\r\n//\r\n//             if (state.isMounted) {\r\n//                 component.didMount();\r\n//             }\r\n//         }\r\n//         else if (state.hasTemplate) {\r\n//             component.unready();\r\n//         }\r\n//\r\n//     };\r\n//\r\n//     if (component.constructor.useShadow && SHADOW_DOM_SUPPORTED) {\r\n//         if (component.shadowRoot) {\r\n//             component._$ui = component.shadowRoot;\r\n//         }\r\n//         else {\r\n//             component._$ui = component.attachShadow({ mode: component.constructor.shadowMode });\r\n//         }\r\n//     }\r\n//     else {\r\n//         component._$ui = component;\r\n//     }\r\n//\r\n//     component.didInit();\r\n//\r\n//     state.readyWatcher = objectWatchProp(state, \"ready\", handleReadyChanges);\r\n//     component.onDestroy(state.readyWatcher);\r\n//     handleReadyChanges();\r\n// }\r\n","import objectExtend from \"@purtuga/common/src/jsutils/objectExtend\"\r\nimport { defineProperty, consoleWarn} from \"@purtuga/common/src/jsutils/runtime-aliases\"\r\nimport {throwIfThisIsPrototype} from \"@purtuga/common/src/jsutils/throwIfThisIsPrototype\"\r\nimport {getKebabCase, elementHasAttributeForProp} from \"../utils\"\r\n\r\n//===============================================================================\r\nconst RE_UPPER_CASE_LETTERS = /[A-Z]/;\r\nconst NOOP = val => val;\r\n\r\n/**\r\n * Create a ComponentElement property.\r\n *\r\n * @param {Object|ComponentElement~PropDefinition} [options|Descriptor]\r\n *\r\n * @returns {Function|Descriptor}\r\n */\r\nexport function prop(options = {}) {\r\n    if (options.key && options.kind) {\r\n        return _propDecorator({}, options);\r\n    }\r\n    return _propDecorator.bind(null, options);\r\n}\r\n\r\nfunction _propDecorator(options, {key, initializer, descriptor}) {\r\n    const propDefinition = getPropSetup(\r\n        key,\r\n        initializer || descriptor.get,\r\n        descriptor.set,\r\n        options\r\n    );\r\n    const newDescriptor = getDecoratorDescriptor(key, key, propDefinition);\r\n\r\n    // Setup the aliases to proxy the values to the same `key`\r\n    if (propDefinition.aliases) {\r\n        newDescriptor.extras = propDefinition.aliases.map(aliasName => getDecoratorDescriptor(aliasName, key));\r\n    }\r\n\r\n    return newDescriptor;\r\n\r\n    //--------------------------------------------------------------------\r\n    // typical Descriptor, for something done like:\r\n    //          @prop myTest = \"value here\"\r\n    //  {\r\n    //     \"kind\": \"field\",\r\n    //     \"key\": \"myTest\",\r\n    //     \"placement\": \"field\",\r\n    //     \"initializer\": function(){ return \"value here\"; },\r\n    //     \"descriptor\": {\r\n    //         \"configurable\": true,\r\n    //         \"writable\": true,\r\n    //         \"enumerable\": true\r\n    //     }\r\n    // }\r\n    //--------------------------------------------------------------------\r\n}\r\n\r\nfunction getDecoratorDescriptor(key, proxyToPropName, componentPropDefinition) {\r\n    const DecoratorDescriptor = {\r\n        key,\r\n        kind: \"method\",\r\n        placement: \"prototype\",\r\n        descriptor: {\r\n            configurable: true,\r\n            get() {\r\n                throwIfThisIsPrototype(this);\r\n                return this.props[proxyToPropName];\r\n            },\r\n            set(newValue) {\r\n                throwIfThisIsPrototype(this);\r\n                return this.props[proxyToPropName] = newValue;\r\n            }\r\n        }\r\n    };\r\n\r\n    if (componentPropDefinition) {\r\n        DecoratorDescriptor.finisher = function (Klass) {\r\n            // Create Class \"propsDef\" that inherits from super class\r\n            if (!Klass.hasOwnProperty(\"propsDef\")) {\r\n                defineProperty(\r\n                    Klass,\r\n                    \"propsDef\",\r\n                    objectExtend(Object.create(null), Klass.propsDef)\r\n                );\r\n            }\r\n            Klass.propsDef[key] = componentPropDefinition;\r\n        };\r\n    }\r\n\r\n    return DecoratorDescriptor;\r\n}\r\n\r\n\r\n/**\r\n * A property definition\r\n *\r\n * @private\r\n *\r\n * @param name\r\n * @param {Function} initializer\r\n * @param {Function} validator\r\n * @param {Object} propDef\r\n *\r\n * @returns {ComponentElement~PropDefinition}\r\n */\r\nfunction getPropSetup(name, initializer, validator, propDef) {\r\n    /**\r\n     * A Class prop definition\r\n     *\r\n     * @typedef {Object} ComponentElement~PropDefinition\r\n     * @property {String} name              Then name of the prop\r\n     * @property {Boolean} attr             Can the prop be set via an HTML attribute\r\n     * @property {Boolean} required         Is the prop required\r\n     * @property {Boolean} boolean          Is the prop value meant to be a boolean (note: also forces `attr` to true)\r\n     * @property {Function} default         Function that returns default value (the `getter` when decorator is used)\r\n     * @property {Function} filter          Function that filters the value being set (the `setter` when decorator is used)\r\n     * @property {Array<String>} aliases    An array of aliases for the prop\r\n     */\r\n    const propertyDefinition = objectExtend(\r\n        {\r\n            name,\r\n            attr: false,\r\n            required: false,\r\n            boolean: false,\r\n            default: initializer || NOOP,\r\n            filter: validator || NOOP,\r\n            aliases: []\r\n            // _isAlias: --- used in getPropsDefinition()\r\n        },\r\n        propDef\r\n    );\r\n\r\n    // If this is a boolean, then force `attr` to `true`, and\r\n    // redefine default adn filter values\r\n    if (propertyDefinition.boolean) {\r\n        propertyDefinition.attr = true;\r\n        propertyDefinition.default = propertyDefinition.filter = function () {\r\n            const response = elementHasAttributeForProp(this, propertyDefinition);\r\n\r\n            // DEV MODE assistance\r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                // when attempting to set a value that differs from\r\n                // element.hasAttribute() - show warning in console\r\n                if (\r\n                    arguments.length &&\r\n                    (\r\n                        Boolean(\"string\" === typeof arguments[0]\r\n                            ? arguments[0] || 1\r\n                            : arguments[0]) !== response\r\n                    )\r\n                ) {\r\n                    consoleWarn(`'${this.constructor.name}#${name}|${propertyDefinition.aliases.join(\"|\")}' prop is setup as a Boolean Attr and can only be set via HTML attribute!`);\r\n                }\r\n            }\r\n\r\n            return response;\r\n        }\r\n    }\r\n\r\n    // Add name lowercase alias - if applicable\r\n    if (name.toLowerCase() !== name) {\r\n        propertyDefinition.aliases.push(name.toLowerCase());\r\n    }\r\n\r\n    // If the prop name has upper case letters, then its possible that it is\r\n    // defined as camelCase - create ka-bab alias.\r\n    if (RE_UPPER_CASE_LETTERS.test(name)) {\r\n        propertyDefinition.aliases.push(getKebabCase(name));\r\n    }\r\n\r\n    return propertyDefinition;\r\n}\r\n","import {defineProperty} from \"@purtuga/common/src/jsutils/runtime-aliases\";\r\nimport {throwIfThisIsPrototype} from \"@purtuga/common/src/jsutils/throwIfThisIsPrototype.js\"\r\n/**\r\n * Binds the given method to the Class instance on first `get`.\r\n *\r\n * @return {Function|Object}\r\n */\r\nexport function bind(options) {\r\n    if (options.key && options.kind) {\r\n        return _bound(options);\r\n    }\r\n    return _bound;\r\n}\r\n\r\nfunction _bound(decoratorDescriptor) {\r\n    const {kind, key, descriptor} = decoratorDescriptor;\r\n    if (kind === \"method\" && descriptor.value) {\r\n        let isDoingLazySetup = false; // Fuck you IE!\r\n        const method = descriptor.value;\r\n\r\n        delete descriptor.value;\r\n        delete descriptor.writable;\r\n\r\n        descriptor.get = function () {\r\n            throwIfThisIsPrototype(this);\r\n\r\n            if (isDoingLazySetup) {\r\n                return;\r\n            }\r\n            isDoingLazySetup = true;\r\n\r\n            const boundMethod = method.bind(this);\r\n            defineProperty(this, key, boundMethod);\r\n            isDoingLazySetup = false;\r\n\r\n            return boundMethod;\r\n        }\r\n    }\r\n\r\n    return decoratorDescriptor;\r\n\r\n    // {\r\n    //     \"kind\": \"method\",\r\n    //     \"key\": \"private\",\r\n    //     \"placement\": \"prototype\",\r\n    //     \"descriptor\": {\r\n    //         \"writable\": true,\r\n    //         \"configurable\": true,\r\n    //         \"enumerable\": false,\r\n    //         \"value\": function(){}\r\n    //     }\r\n    // }\r\n}\r\n","export * from \"./ComponentElement.js\"\r\nexport * from \"./decorators/prop.js\"\r\nexport * from \"./decorators/bind.js\"\r\nexport {\r\n    getState,\r\n    STATE_SYMBOL\r\n} from \"./utils\"\r\nexport { ComponentElement as default } from \"./ComponentElement.js\"\r\n\r\n"],"sourceRoot":""}